# -*- coding: utf-8 -*-
"""Handwritten_digit_recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HZE0yVTdA_h-tGUJC-npB4_NhzpqIKyJ
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import cv2 as cv

mnist = tf.keras.datasets.mnist

(X_train, y_train),(X_test, y_test) = mnist.load_data()

X_train.shape

plt.imshow(X_train[0])
plt.show()
plt.imshow(X_train[0], cmap = plt.cm.binary)

print(X_train[0])

X_train = tf.keras.utils.normalize(X_train, axis = 1)
X_test = tf.keras.utils.normalize(X_test, axis = 1)
plt.imshow(X_train[0], cmap = plt.cm.binary)

print(X_train[0])

print(y_train[0])

IMG_SIZE = 28
X_trainr = np.array(X_train).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
X_testr = np.array(X_test).reshape(-1, IMG_SIZE, IMG_SIZE, 1)
print("Training Samples dimension", X_trainr.shape)
print("Testing Samples dimension", X_testr.shape)

from tensorflow.keras.models import Sequential # type: ignore
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D # type: ignore

model = Sequential()

# First Convolution Layer
model.add(Conv2D(64, (3,3), input_shape = X_trainr.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size = (2,2)))

# Second Convolution Layer
model.add(Conv2D(64, (3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size = (2,2)))

# Third Convolution Layer
model.add(Conv2D(64, (3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size = (2,2)))

# Fully Connected Layer 1
model.add(Flatten())
model.add(Dense(64))
model.add(Activation("relu"))

# Fully Connected Layer 2
model.add(Dense(32))
model.add(Activation("relu"))

# Fully Connected Layer 3
model.add(Dense(10))
model.add(Activation("softmax"))

model.summary()

print("Total Training Samples = ", len(X_trainr))

model.compile(loss = "sparse_categorical_crossentropy", optimizer = "adam", metrics = ["accuracy"])

model.fit(X_trainr, y_train, epochs=5, validation_split=0.3)

test_loss, test_acc = model.evaluate(X_testr, y_test)
print("Test Loss on 10,000 test samples", test_loss)
print("Validation Accuracy on 10,000 test samples", test_acc)

predictions = model.predict([X_testr])

print(predictions)

print(np.argmax(predictions[0]))

plt.imshow(X_test[0])

print(np.argmax(predictions[313]))

plt.imshow(X_test[313])


img = cv.imread('eight.png')
img_rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)

plt.imshow(img)